/*
  Basic ESP8266 MQTT example

  This sketch demonstrates the capabilities of the pubsub library in combination
  with the ESP8266 board/library.

  It connects to an MQTT server then:
  - publishes "hello world" to the topic "outTopic" every two seconds
  - subscribes to the topic "inTopic", printing out any messages
    it receives. NB - it assumes the received payloads are strings not binary
  - If the first character of the topic "inTopic" is an 1, switch ON the ESP Led,
    else switch it off

  It will reconnect to the server if the connection is lost using a blocking
  reconnect function. See the 'mqtt_reconnect_nonblocking' example for how to
  achieve the same result without blocking the main loop.

  To install the ESP8266 board, (using Arduino 1.6.4+):
  - Add the following 3rd party board manager under "File -> Preferences -> Additional Boards Manager URLs":
       http://arduino.esp8266.com/stable/package_esp8266com_index.json
  - Open the "Tools -> Board -> Board Manager" and click install for the ESP8266"
  - Select your ESP8266 in "Tools -> Board"

*/

#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <EEPROM.h>

// Update these with values suitable for your network.
const char* mqtt_server = "192.168.0.103";
char *bufin="";
char *bufout="";
WiFiServer server(8266);//你要的端口号，随意修改，范围0-65535
WiFiClient serverClients;
int ind = 0;
WiFiClient espClient;
PubSubClient client(espClient);
long lastMsg = 0;
int value = 0;
String deviceId = "";
boolean resetflag = false;
boolean checkstatus = false;
boolean setIdflag = true;
String clientId;
int BUFSIZE = 100;
void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
  }
  Serial.println();

  // Switch on the LED if an 1 was received as first character

  if ((char)payload[0] == '1') {
    pinMode(LED_BUILTIN, OUTPUT);
    digitalWrite(LED_BUILTIN, LOW);
     checkstatus = true;
  }
  if ((char)payload[0] == '0')
  {
    pinMode(LED_BUILTIN, OUTPUT);
    digitalWrite(LED_BUILTIN, HIGH);
     checkstatus = true;
  }
  if ((char)payload[0] == '2')
  {
    Serial.println("Reset");
    resetflag = true;
    setIdflag = true;
  }
  if ((char)payload[0] == '3')
  {
    checkstatus = true;
  }
}

void saveDeviceID(const char* id)
{
  size_t i;
  for (i = 0; i <= strlen(id); i++)
  {
    EEPROM.write(i, (uint8_t) id[i]);
  }
  EEPROM.commit();
}

void createDeviceId()
{
  long timestap = micros();
  String local_ip =  WiFi.localIP().toString();
  local_ip.replace(".", "");
  String bssidstr =  WiFi.BSSIDstr();
  bssidstr.replace(":", "");
  deviceId = bssidstr + local_ip + timestap;
}

void writeDeviceId()
{
  createDeviceId();
  saveDeviceID(deviceId.c_str());
  Serial.println("new id :" + deviceId);
}

void pushStatusMessage()
{
  int val = digitalRead(LED_BUILTIN);
  String statusstr = "";
  if (val == 0)
  {
    statusstr = "ison";
  }
  if (val == 1)
  {
    statusstr = "isoff";
  }
  Serial.println(statusstr);

  client.publish(bufout, statusstr.c_str());
}

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Create a random client ID
    Serial.println(deviceId.c_str());
    clientId = "ESP8266Client-";
    clientId += String(random(0xffff), HEX);
    // Attempt to connect
    if (client.connect(deviceId.c_str(), "admin", "password")) {
      Serial.println("connected");
      // Once connected, publish an announcement...

      Serial.println(bufout);
      client.publish(bufout, "hello esp");
      // ... and resubscribe

      client.subscribe(bufin);
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 3 seconds before retrying
      delay(3000);
    }
  }
}

bool autoConfig()
{
  WiFi.begin();
  for (int i = 0; i < 10; i++)
  {
    int wstatus = WiFi.status();
    if (wstatus == WL_CONNECTED)
    {
      Serial.println("AutoConfig Success");
      Serial.printf("SSID:%s\r\n", WiFi.SSID().c_str());
      Serial.printf("PSW:%s\r\n", WiFi.psk().c_str());
      WiFi.printDiag(Serial);
      return true;
    }
    else
    {
      Serial.print("AutoConfig Waiting......");
      Serial.println(wstatus);
      delay(1000);
    }
  }
  Serial.println("AutoConfig Faild!" );
  return false;
  //WiFi.printDiag(Serial);
}

void smartConfig()
{
  WiFi.mode(WIFI_STA);
  /* start SmartConfig */
  WiFi.beginSmartConfig();

  /* Wait for SmartConfig packet from mobile */
  Serial.println("Waiting for SmartConfig.");
  while (!WiFi.smartConfigDone()) {
    delay(500);
    Serial.print(".");
    digitalWrite(LED_BUILTIN, LOW);
  }
  //ip = WiFi.localIP();
  while (WiFi.status() != WL_CONNECTED)
  {
    delay(500);
  }
}

void readDeviceId()
{
  EEPROM.begin(512);
  String buffer;
  for (int i = 0; i < BUFSIZE; i++)
  {
    if (char(EEPROM.read(i)) != 0xFF)
    {
      buffer += char(EEPROM.read(i));
    }
  }
  deviceId = buffer;
}

void start()
{
  pinMode(LED_BUILTIN, OUTPUT);     // Initialize the BUILTIN_LED pin as an output
  Serial.begin(115200);
  randomSeed(micros());
  readDeviceId();
  deviceId.trim();
  if (!autoConfig()) {
    Serial.println("Start module");
    EEPROM.begin(512);
    smartConfig();
    writeDeviceId();
  }
  const char *expr = deviceId.c_str();
  bufin = new char[strlen(expr)+1];
  strcpy(bufin, expr);
  strcat(bufin, "in");

  bufout = new char[strlen(expr)+1];
  strcpy(bufout, expr);
  strcat(bufout, "out");
  
  server.begin();
  delay(100);
  client.setServer(mqtt_server, 61613);
  client.setCallback(callback);
}

void tcpServer () {
  delay(200);
  // Check if a client has connected
  WiFiClient client = server.available();
  if (!client) {
    return;
  }
  // Wait until the client sends some data
  Serial.println("new client");
  while (!client.available()) {
    delay(1);
  }
  // Read the first line of the request
  String req = client.readStringUntil('\r');
  Serial.println(req);
  client.flush();
  // Match the request
  if (req.indexOf("getId") != -1)
  {
    Serial.println("tcp start...");
    client.flush();
    deviceId.trim();
    // Send the response to the client
    client.write(deviceId.c_str(), deviceId.length());
    Serial.println("send to mobile: " + deviceId);
  }
  else {
    Serial.println("invalid para");
    client.stop();
    return;
  }
  client.flush();
  // Prepare the response

  delay(1);
  Serial.println("Client disonnected");
}

void setup() {
  start();
}

void loop() {

  if (!client.connected()) {
    reconnect();
  }
  client.loop();
  String text = Serial.readString();
  text.trim();
  if (text == "reset")
  {
    ESP.eraseConfig();
    ESP.restart();
  }
  if (text == "addstring")
  {
    Serial.println(bufin);
    Serial.println(bufout);
  }
   
  if (text == "getId")
  {
    Serial.println("Loop in :" + deviceId);
  }
  if (server.hasClient())
  {
    Serial.println("get id by tcp");
    tcpServer();
  }
  if (checkstatus)
  {
    pushStatusMessage();
    checkstatus = false;
  }
  if (resetflag)
  {
    resetflag = false;
    Serial.print("Start: ");
    ESP.eraseConfig();
    ESP.restart();
  }
}