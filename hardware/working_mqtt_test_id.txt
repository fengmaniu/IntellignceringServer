
#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <EEPROM.h>

// Update these with values suitable for your network.
const char* mqtt_server = "192.168.0.103";
char *bufin = "";
char *bufout = "";
WiFiServer server(8266);//你要的端口号，随意修改，范围0-65535
WiFiClient serverClients;
int ind = 0;
WiFiClient espClient;
PubSubClient client(espClient);
long lastMsg = 0;
int value = 0;
String deviceId = "";
boolean resetflag = false;
boolean checkstatus = false;
boolean setIdflag = true;
String clientId;
int BUFSIZE = 100;
//接受4g消息的回调函数
void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
  }
  Serial.println();

  // Switch on the LED if an 1 was received as first character

  if ((char)payload[0] == '1') {
    pinMode(LED_BUILTIN, OUTPUT);
    digitalWrite(LED_BUILTIN, LOW);
    checkstatus = true;
  }
  if ((char)payload[0] == '0')
  {
    pinMode(LED_BUILTIN, OUTPUT);
    digitalWrite(LED_BUILTIN, HIGH);
    checkstatus = true;
  }
  if ((char)payload[0] == '2')
  {
    Serial.println("Reset");
    resetflag = true;
  }
  if ((char)payload[0] == '3')
  {
    checkstatus = true;
  }
}
//设备id保存到rom中
void saveDeviceID(const char* id)
{
  size_t i;
  for (i = 0; i <= strlen(id); i++)
  {
    EEPROM.write(i, (uint8_t) id[i]);
  }
  EEPROM.commit();
}
//生成设备id
void createDeviceId()
{
  long timestap = micros();
  String local_ip =  WiFi.localIP().toString();
  local_ip.replace(".", "");
  String bssidstr =  WiFi.BSSIDstr();
  bssidstr.replace(":", "");
  deviceId = bssidstr + local_ip + timestap;
}
//将设备id写入rom
void writeDeviceId()
{
  createDeviceId();
  saveDeviceID(deviceId.c_str());
  Serial.println("new id :" + deviceId);
}
//通过4g发送设备状态消息
void pushStatusMessage()
{
  int val = digitalRead(LED_BUILTIN);
  String statusstr = "";
  if (val == 0)
  {
    statusstr = "ison";
  }
  if (val == 1)
  {
    statusstr = "isoff";
  }
  Serial.println(statusstr);

  client.publish(bufout, statusstr.c_str());
}
//连接mqtt server，
boolean reconnect() {
  // Loop until we're reconnected
  boolean isconnect = true;
  int i = 0;
  while (!client.connected()) {
    if (i > 15)
    {
      isconnect = false;
      break; //30 秒内尝试15次没有连接成功则退出
    }
    i++;
    Serial.print("Attempting MQTT connection...");
    // Create a random client ID
    Serial.println(deviceId.c_str());
    clientId = "ESP8266Client-";
    clientId += String(random(0xffff), HEX);
    // Attempt to connect
    if (client.connect(deviceId.c_str(), "admin", "password")) {
      Serial.println("connected");
      // Once connected, publish an announcement...

      Serial.println(bufout);
      client.publish(bufout, "hello esp");
      // ... and resubscribe

      client.subscribe(bufin);
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 2 seconds before retrying
      delay(2000);
    }
  }
  return isconnect;
}

//自动配置连接wifi
bool autoConfig()
{
  WiFi.begin();
  for (int i = 0; i < 10; i++)
  {
    int wstatus = WiFi.status();
    if (wstatus == WL_CONNECTED)
    {
      Serial.println("AutoConfig Success");
      Serial.printf("SSID:%s\r\n", WiFi.SSID().c_str());
      Serial.printf("PSW:%s\r\n", WiFi.psk().c_str());
      WiFi.printDiag(Serial);
      return true;
    }
    else
    {
      Serial.print("AutoConfig Waiting......");
      Serial.println(wstatus);
      delay(1000);
    }
  }
  Serial.println("AutoConfig Faild!" );
  return false;
  //WiFi.printDiag(Serial);
}

//配置连接wifi
void smartConfig()
{
  WiFi.mode(WIFI_STA);
  /* start SmartConfig */
  WiFi.beginSmartConfig();

  /* Wait for SmartConfig packet from mobile */
  Serial.println("Waiting for SmartConfig.");
  while (!WiFi.smartConfigDone()) {
    delay(500);
    Serial.print(".");
    digitalWrite(LED_BUILTIN, LOW);
  }
  //ip = WiFi.localIP();
  while (WiFi.status() != WL_CONNECTED)
  {
    delay(500);
  }
}
//读取rom中设备id
void readDeviceId()
{
  EEPROM.begin(512);
  String buffer;
  for (int i = 0; i < BUFSIZE; i++)
  {
    if (char(EEPROM.read(i)) != 0xFF)
    {
      buffer += char(EEPROM.read(i));
    }
  }
  deviceId = buffer;
}

//无网登陆本地tcp消息
void tcpServer () {
  delay(200);
  // Check if a client has connected
  WiFiClient client = server.available();
  if (!client) {
    return;
  }
  // Wait until the client sends some data
  Serial.println("new client");
  int i = 0;
  boolean hasClinet = true;
  //判断是否有tcp消息，尝试50次，500毫秒
  while (!client.available()) {
    if (i > 50)
    {
      hasClinet = false;
      break;
    }
    i++;
    delay(10);
  }
  if (hasClinet)
  {
    // Read the first line of the request
    String req = client.readStringUntil('\r');
    Serial.println(req);
    client.flush();
    // Match the request
    if (req.indexOf("ison") != -1)
    {
      pinMode(LED_BUILTIN, OUTPUT);
      digitalWrite(LED_BUILTIN, HIGH);
      client.write("ison", 4);
      Serial.println("send to mobile deviceId: ison");
    }
    else if (req.indexOf("isoff") != -1)
    {
      pinMode(LED_BUILTIN, OUTPUT);
      digitalWrite(LED_BUILTIN, LOW);
      client.write("isoff", 5);
      Serial.println("send to mobile deviceId: isoff");
    }
    else if (req.indexOf("esp8266") != -1)
    {
      client.flush();
      deviceId.trim();
      // Send the response to the client
      client.write(deviceId.c_str(), deviceId.length());
      Serial.println("send to mobile deviceId: " + deviceId);
    }
    else if (req.indexOf("checkStatus") != -1)
    {
      client.flush();
      int val = digitalRead(LED_BUILTIN);
      String statusstr = "";
      if (val == 0)
      {
        statusstr = "ison";
        client.write("ison", 4);
      }
      if (val == 1)
      {
        statusstr = "isoff";
        client.write("isoff", 5);
      }
      Serial.println("tcp start...");

      // Send the response to the client

      Serial.println("send to mobile: " + statusstr);
    }
    else if (req.indexOf("reset") != -1)
    {
      client.write("delete", 6);
      Serial.println("send to mobile: delete ");
      resetflag = true;
    }
    else {
      Serial.println("invalid para");
      client.stop();
      return;
    }
    client.flush();
    // Prepare the response

    delay(1);
    Serial.println("Client disonnected");
  }
  else
  {
    Serial.println("tpc Client error");
  }
}

void setIdbyTcp() {
  delay(200);
  // Check if a client has connected
  WiFiClient client = server.available();
  if (!client) {
    return;
  }
  // Wait until the client sends some data
  Serial.println("new client");
  int i = 0;
  boolean hasClinet = true;
  //判断是否有tcp消息，尝试50次，500毫秒
  while (!client.available()) {
    if (i > 50)
    {
      hasClinet = false;
      break;
    }
    i++;
    delay(10);
  }
  if (hasClinet)
  {
    // Read the first line of the request
    String req = client.readStringUntil('\r');
    Serial.println(req);
    client.flush();
    if (req.indexOf("esp8266") != -1)
    {
      client.flush();
      req.trim();
      saveDeviceID(req.c_str());
      deviceId = req;
      // Send the response to the client
      client.write(deviceId.c_str(), deviceId.length());
      Serial.println("send to mobile deviceId: " + deviceId);
    }
    client.flush();
    // Prepare the response
    delay(1);
    Serial.println("Client disonnected");
  }
  else
  {
    Serial.println("tpc Client error");
  }
}

void start()
{
  pinMode(LED_BUILTIN, OUTPUT);     // Initialize the BUILTIN_LED pin as an output
  Serial.begin(115200);
  randomSeed(micros());
  readDeviceId();
  deviceId.trim();
  Serial.println(deviceId.c_str());
  Serial.println("read id");
  if (!autoConfig()) {
    Serial.println("Start module");
    EEPROM.begin(512);
    smartConfig();
    //writeDeviceId();
  }

  server.begin();
  delay(100);
  const char *exprlen = deviceId.c_str();
  if (strlen(exprlen) == 0)
  {
    while (server.hasClient() == false)
    {
      delay(500);
      Serial.println("waiting client..");
    }
    setIdbyTcp();
  }
  else
  {
    Serial.println("has deviceId");
    Serial.println(deviceId.c_str());
  }

  const char *expr = deviceId.c_str();
  bufin = new char[strlen(expr) + 1];
  strcpy(bufin, expr);
  strcat(bufin, "in");

  bufout = new char[strlen(expr) + 1];
  strcpy(bufout, expr);
  strcat(bufout, "out");

  client.setServer(mqtt_server, 61613);
  client.setCallback(callback);
}

void setup() {
  start();
}

void loop() {
  //wifi是否连接成功
  if (WiFi.status() != WL_CONNECTED)
  {

  }
  else
  {
    //判断是否可以连接外网尝试30秒,循环后再判断
    boolean isconnect = true;
    if (!client.connected()) {
      isconnect = reconnect();
    }
    if (isconnect)
    {
      client.loop();
    }
    String text = Serial.readString();
    text.trim();
    if (text == "reset")
    {
      ESP.eraseConfig();
      ESP.restart();
    }
    if (text == "addstring")
    {
      Serial.println(bufin);
      Serial.println(bufout);
    }
    //判断是否有本地tcp消息
    if (server.hasClient())
    {
      Serial.println("get id by tcp");
      tcpServer();
    }
    //默认为false，通过4g查看设备状态
    if (checkstatus)
    {
      pushStatusMessage();
      checkstatus = false;
    }
    //重置设备，用于wifi密码重置，设备从控制端删除的操作，需要重新smartconfig配对
    if (resetflag)
    {
      resetflag = false;
      Serial.print("Start: ");
      ESP.eraseConfig();
      ESP.restart();
    }
  }
}