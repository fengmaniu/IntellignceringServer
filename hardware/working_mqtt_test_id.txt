/*
  Basic ESP8266 MQTT example

  This sketch demonstrates the capabilities of the pubsub library in combination
  with the ESP8266 board/library.

  It connects to an MQTT server then:
  - publishes "hello world" to the topic "outTopic" every two seconds
  - subscribes to the topic "inTopic", printing out any messages
    it receives. NB - it assumes the received payloads are strings not binary
  - If the first character of the topic "inTopic" is an 1, switch ON the ESP Led,
    else switch it off

  It will reconnect to the server if the connection is lost using a blocking
  reconnect function. See the 'mqtt_reconnect_nonblocking' example for how to
  achieve the same result without blocking the main loop.

  To install the ESP8266 board, (using Arduino 1.6.4+):
  - Add the following 3rd party board manager under "File -> Preferences -> Additional Boards Manager URLs":
       http://arduino.esp8266.com/stable/package_esp8266com_index.json
  - Open the "Tools -> Board -> Board Manager" and click install for the ESP8266"
  - Select your ESP8266 in "Tools -> Board"

*/

#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <user_interface.h>
#define MAX_SRV_CLIENTS 1   //最大同时联接数，即你想要接入的设备数量，8266tcpserver只能接入五个，哎 
#define ESP_PARAM_START_SEC 0x3D
struct server_info {String server_ip;int server_port;} ser_info;
// Update these with values suitable for your network.
const char* mqtt_server = "192.168.0.103";
WiFiServer server(8266);//你要的端口号，随意修改，范围0-65535
WiFiClient serverClients[MAX_SRV_CLIENTS];
int ind = 0;
char data[150];
WiFiClient espClient;
PubSubClient client(espClient);
long lastMsg = 0;
char msg[50];
int value = 0;
String deviceId="9999";
boolean resetflag = false;
boolean checkstatusflag = false;
boolean setIdflag = true;

void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
  }
  Serial.println();

  // Switch on the LED if an 1 was received as first character

  if ((char)payload[0] == '1') {
    pinMode(LED_BUILTIN, OUTPUT);
    digitalWrite(LED_BUILTIN, LOW);
  }
  if ((char)payload[0] == '0')
  {
    pinMode(LED_BUILTIN, OUTPUT);
    digitalWrite(LED_BUILTIN, HIGH);
  }
  if ((char)payload[0] == '2')
  {
    Serial.println("Reset");
    resetflag = true;
    setIdflag = true;
  }
  if ((char)payload[0] == '3')
  {
    checkstatusflag = true;
    Serial.println("check status");
    ++value;
    Serial.println(value);
    int val = digitalRead(LED_BUILTIN);
    String statusstr = "";
    if (val == 0)
    {
      statusstr = "ison";
    }
    if (val == 1)
    {
      statusstr = "isoff";
    }
    Serial.println(statusstr);
    client.publish(deviceId.c_str(), statusstr.c_str());
  }
}
String setDeviceId()
{
  //system_param_load(ESP_PARAM_START_SEC, 0, &ser_info, sizeof(ser_info));  
  //os_memcpy(ser_ip, ser_info.esp_tcp_server_ip, os_strlen(ser_info.esp_tcp_server_ip));  
  //String server_ip = ser_info.server_ip;  
  server.begin();
  server.setNoDelay(true);  //加上后才正常些
  long timestap = micros();
  String deviceId = WiFi.BSSIDstr() + WiFi.localIP().toString() + timestap;
  while (setIdflag)
  {
    delay(500);
    Serial.println("deviceId setting......");
    uint8_t i;
    //tcp 丢包未验证
    if (server.hasClient())
    {
      for (i = 0; i < MAX_SRV_CLIENTS; i++)
      {
        if (!serverClients[i] || !serverClients[i].connected())
        {
          if (serverClients[i]) serverClients[i].stop();
          serverClients[i] = server.available();
          const char * mystr = deviceId.c_str();
          Serial.println(deviceId.c_str());
          serverClients[i].write(mystr, deviceId.length());
          setIdflag = false;
          continue;
        }
      }
      WiFiClient serverClient = server.available();
      serverClient.stop();
    }
  }
 // ser_info.server_ip = deviceId;
  //system_param_save_with_protect(ESP_PARAM_START_SEC, &ser_info, sizeof(ser_info));
  return deviceId;
}

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Create a random client ID
    Serial.println(deviceId.c_str());
    String clientId = "ESP8266Client-";
    clientId += String(random(0xffff), HEX);
    // Attempt to connect
    if (client.connect(deviceId.c_str(), "admin", "password")) {
      Serial.println("connected");
      // Once connected, publish an announcement...
      client.publish(deviceId.c_str(), "hello world");
      // ... and resubscribe
      client.subscribe(deviceId.c_str());
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 3 seconds before retrying
      delay(3000);
    }
  }
}

bool autoConfig()
{
  WiFi.begin();
  for (int i = 0; i < 10; i++)
  {
    int wstatus = WiFi.status();
    if (wstatus == WL_CONNECTED)
    {
      Serial.println("AutoConfig Success");
      Serial.printf("SSID:%s\r\n", WiFi.SSID().c_str());
      Serial.printf("PSW:%s\r\n", WiFi.psk().c_str());
      WiFi.printDiag(Serial);
      return true;
    }
    else
    {
      Serial.print("AutoConfig Waiting......");
      Serial.println(wstatus);
      delay(1000);
    }
  }
  Serial.println("AutoConfig Faild!" );
  return false;
  //WiFi.printDiag(Serial);
}

void smartConfig()
{
  WiFi.mode(WIFI_STA);
  /* start SmartConfig */
  WiFi.beginSmartConfig();

  /* Wait for SmartConfig packet from mobile */
  Serial.println("Waiting for SmartConfig.");
  while (!WiFi.smartConfigDone()) {
    delay(500);
    Serial.print(".");
    digitalWrite(LED_BUILTIN, LOW);
  }
  //ip = WiFi.localIP();
  while (WiFi.status() != WL_CONNECTED)
  {
    delay(500);
  }
  randomSeed(micros());
  deviceId = setDeviceId();
}

void setup() {
  pinMode(LED_BUILTIN, OUTPUT);     // Initialize the BUILTIN_LED pin as an output
  Serial.begin(115200);
  if (!autoConfig()) {
    Serial.println("Start module");
    smartConfig();
  }
  client.setServer(mqtt_server, 61613);
  client.setCallback(callback);
}

void loop() {
  if (resetflag)
  {
    smartConfig();
    Serial.println(deviceId);
    resetflag = false;
  }
  else
  {
    if (!client.connected()) {
      reconnect();
    }
    client.loop();
  }
}