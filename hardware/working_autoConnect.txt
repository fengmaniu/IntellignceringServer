#include <ESP8266WiFi.h>
#define MAX_SRV_CLIENTS 1   //最大同时联接数，即你想要接入的设备数量，8266tcpserver只能接入五个，哎 
WiFiServer server(8266);//你要的端口号，随意修改，范围0-65535
WiFiClient serverClients[MAX_SRV_CLIENTS];
IPAddress ip;
int ind = 0;
char data[150];

void setup()
{
    Serial.begin(115200);
    delay(10);
    pinMode(LED_BUILTIN, OUTPUT);
    digitalWrite(LED_BUILTIN, HIGH);
   if (!autoConfig()){
    Serial.println("Start module");
    smartConfig();
    }
    Serial.println(WiFi.localIP());
    server.begin();
    server.setNoDelay(true);  //加上后才正常些
}

void smartConfig()
{
    WiFi.mode(WIFI_STA);
  /* start SmartConfig */
    WiFi.beginSmartConfig();

  /* Wait for SmartConfig packet from mobile */
    Serial.println("Waiting for SmartConfig.");
    while (!WiFi.smartConfigDone()) {
    delay(500);
    Serial.print(".");
    digitalWrite(LED_BUILTIN, LOW);
    }
    //ip = WiFi.localIP();
    while (WiFi.status() != WL_CONNECTED)
    {
        delay(500);
    }
}

bool autoConfig()
{
  WiFi.begin();
  for (int i = 0; i < 10; i++)
  {
    int wstatus = WiFi.status();
    if (wstatus == WL_CONNECTED)
    {
      Serial.println("AutoConfig Success");
      Serial.printf("SSID:%s\r\n", WiFi.SSID().c_str());
      Serial.printf("PSW:%s\r\n", WiFi.psk().c_str());
      WiFi.printDiag(Serial);
      return true;
    }
    else
    {
      Serial.print("AutoConfig Waiting......");
      Serial.println(wstatus);
      delay(1000);
    }
  }
  Serial.println("AutoConfig Faild!" );
  return false;
  //WiFi.printDiag(Serial);
}

void loop()
{
    delay(500);
    Serial.println(WiFi.localIP());
    //Serial.println("start loop");
    uint8_t i;
    if (server.hasClient())
    {
        for (i = 0; i < MAX_SRV_CLIENTS; i++)
        {
            if (!serverClients[i] || !serverClients[i].connected())
            {
                if (serverClients[i]) serverClients[i].stop();//未联接,就释放
                serverClients[i] = server.available();//分配新的
                Serial.println(serverClients[i].read());
                Serial.println("session 1");
                continue;
            }
        }
        WiFiClient serverClient = server.available();
        serverClient.stop();
    }
    for (i = 0; i < MAX_SRV_CLIENTS; i++)
    {
        if (serverClients[i] && serverClients[i].connected())
        {
            if (serverClients[i].available())
            {
                 Serial.println("Connected to client !!! ");  
                 WiFiClient client = serverClients[i];
                
                 while (serverClients[i].available()) {  
                    data[ind] = serverClients[i].read(); //读取client端发送的字符
                    ind++;     
                }  
                for(int j=0;j < ind; j++)  
                {  
                  Serial.print(data[j]);  
                }  
                Serial.println("session 2");
                String datas= data;
                Serial.println(datas);
                if (datas  == "off") {
                  Serial.println("turn off");
                  digitalWrite(LED_BUILTIN, HIGH);
                }
                if (datas == "on"){
                  Serial.println("turn on");
                  digitalWrite(LED_BUILTIN, LOW);
                  }
                  memset(data,0,sizeof(data));
                  ind = 0;
            }
        }
    }
    
    if (Serial.available())
    {
        size_t len = Serial.available();
        uint8_t sbuf[len];
        Serial.readBytes(sbuf, len);
        //push UART data to all connected telnet clients
        for (i = 0; i < MAX_SRV_CLIENTS; i++)
        {
            if (serverClients[i] && serverClients[i].connected())
            {
                serverClients[i].write(sbuf, len);  //向所有客户端发送数据
                delay(100);
            }
        }
    }
}